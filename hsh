#!/usr/bin/env sh
#
# Home Sweet Home - The easy to use, KISS, dot-file manager
# Copyright 2014 Guillermo Indalecio Fernandez
#

EXEC=`readlink -e "$0"`
DIR=`dirname "$EXEC"`

die () {
	echo "$1"
	exit 1
}

do_status () {
	if test -n "$1"; then
		if test -n "$2"; then
			fullfilepath="./home/$1/$2"
		else
			fullfilepath=`readlink -e "$HOME/$1"` || die "File not found in home"
		fi
		git diff --src-prefix="hsh@" --dst-prefix="home@" "$fullfilepath" || die "File not found in repository"
	else
		output=""
		for file in `find ./home/*/ -mindepth 1 -maxdepth 1 2>/dev/null`; do
			base=`basename $file`
			local=$HOME/$base
			dir=`dirname "$file"`
			set=`basename "$dir"`
			if [ -h "$local" -a "$file" -ef `readlink -e "$local"` ]; then
				if test -n "`git status --porcelain $file`"; then
					output="$output\n""`printf "  \033[31;2m%10s %-15s  linked, modified\033[0m" "$set" "$base"`"
				else
					output="$output\n""`printf "  %10s %-15s  linked" "$set" "$base"`"
				fi
			else
				if test -n "`git status --porcelain $file`"; then
					output="$output\n""`printf "  \033[31;2m%10s %-15s  modified\033[0m" "$set" "$base"`"
				else
					output="$output\n""`printf "  %10s %-15s" "$set" "$base"`"
				fi
			fi
		done
		if test -n "$output"; then
			printf "  \033[1m%10s %-15s  Status\033[0m" "Set" "Dotfile"
			printf "%b\n" "$output"
		else
			echo "There are no files defined, please use add to create and populate a set"
		fi
	fi
}

do_install () {
	setname=${1:-base}
	filename="$2"
	for file in `find "./home/$setname/" -mindepth 1 -maxdepth 1`; do
		base=`basename "$file"`
		file=`readlink -e "$file"`
		local=$HOME/$base
		if [ "$filename" != "" -a "$filename" != "$base" ]; then
			continue
		fi
		if [ -e "$local" -a '!' -h "$local" ]; then
			mv "$local" "$local.bak"
		fi
		rm -f "$local"
		ln -s "$file" "$local"
		echo "Installed $setname/$base"
	done
}

do_uninstall () {
	setname=${1:-base}
	filename="$2"
	for file in `find "./home/$setname/" -mindepth 1 -maxdepth 1`
	do
		base=`basename $file`
		local=$HOME/$base
		if [ "$filename" != "" -a "$filename" != "$base" ]; then
			continue
		fi
		if [ -h "$local" -a "$local" -ef "$file" ]; then
			rm "$local"
			if [ -e "$local.bak" ]; then
				mv "$local.bak" "$local"
			fi
			echo "Uninstalled $setname/$base"
		fi
	done
}

do_upload () {
	msg=$1
	test -n "$msg" || die "Give me a commit message"
	git add ./home/
	git commit -a -m "$msg"
	git push
}

do_download () {
	git pull || die "Impossible to download, why oh why?"
}

do_add () {
	setname="$1"
	basename="$2"
	if test -z "$basename"; then
		echo "Please give me a filename to add to set $1"
		return
	fi
	homefile="$HOME/$basename"
	destination="./home/$setname/$basename"
	if [ -e "$homefile" ]; then
		homefile=`readlink -e "$homefile"`
		if [ ! -d "./home/$setname/" ]; then
			mkdir -p "./home/$setname/"
			echo "Set $setname created"
		fi
		cp -r "$homefile" "$destination"
		echo "Added $setname/$basename"
	fi
}

do_rm () {
	setname="$1"
	basename="$2"
	if test -z "$basename"; then
		echo "Please give me a filename to remove from set $1"
		return
	fi
	homefile="$HOME/$basename"
	destination="./home/$setname/$basename"
	if [ -e "$destination" ]; then
		do_uninstall "$setname" "$basename"
		rm -r "$destination"
		echo "Removed $setname/$basename"
		if [ -z "`ls -A "./home/$setname/"`" ]; then
			rmdir "./home/$setname/"
			echo "Set $setname removed"
		fi
	fi
}

do_git () {
	git $@
}

usage () {
	tee <<USAGEEOF

Home Sweet Home (hsh) -- The easy to use, KISS, dot-file manager

Usage: hsh <command> [<options>]

Where command is one of:

      status: Get info about installed files and possible changes not commited
     install: Link the files in the specified sets into home
   uninstall: Remove links from home, and try to recover the original files in your home
      upload: Push the changes in the files to the online repository
    download: Update your files with the online repository version
         add: Add a file from home to the repository, create a set if needed
          rm: Remove a file from the respository, removing the set if it gets emptied
         git: Run a command in git, from inside the hsh folder (experts here)

USAGEEOF
}

# Dispatch the command entered by the user here
main () {
	cd "$DIR"
	command="$1"
	case "$command" in
		upload|download|install|uninstall|status|add|rm|git)
		shift
		do_$command $@
		;;
		*)
		usage
		;;
	esac
}

main $@

