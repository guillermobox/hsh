#!/usr/bin/env sh
#
# Home Sweet Home - Syncronize dotfiles and configure systems
# Copyright 2014 Guillermo Indalecio Fernandez
#

EXEC=`readlink -f "$0"`
DIR=`dirname "$EXEC"`

die () {
	echo "$1"
	exit 1
}

do_install () {
	setname=${1:-base}
	filename="$2"
	for file in `find "./home/$setname/" -mindepth 1 -maxdepth 1`
	do
		base=`basename "$file"`
		file=`readlink -f "$file"`
		local=$HOME/$base
		if [ "$filename" != "" -a "$filename" != "$base" ]
		then
			continue
		fi
		if [ -e "$local" -a '!' -h "$local" ]
		then
			mv "$local" "$local.bak"
		fi
		echo "Installing [$setname] $base"
		rm -f "$local"
		ln -s "$file" "$local"
	done
}

do_uninstall () {
	setname=${1:-base}
	filename="$2"
	for file in `find "./home/$setname/" -mindepth 1 -maxdepth 1`
	do
		base=`basename $file`
		local=$HOME/$base
		if [ "$filename" != "" -a "$filename" != "$base" ]
		then
			continue
		fi
		if [ -h "$local" ]
		then
			echo "Uninstalling [$setname] $base"
			rm "$local"
			if [ -e "$local.bak" ]; then
				mv "$local.bak" "$local"
			fi
		fi
	done
}

do_upload () {
	msg=$1
	test -n "$msg" || die "Give me a commit message"
	git commit -a -m "$msg"
	git push
}

do_status () {
	if test -n "$1"; then
		fullfilepath=`readlink -f "$HOME/$1"` || die "File not found in home"
		git diff --src-prefix="hsh@" --dst-prefix="home@" "$fullfilepath" || die "File not found in repository"
	else
		output=""
		for file in `find ./home/*/ -mindepth 1 -maxdepth 1`
		do
			base=`basename $file`
			local=$HOME/$base
			if [ -h "$local" -a "$file" -ef `readlink -f "$local"` ]; then
				dir=`dirname "$file"`
				set=`basename "$dir"`
				if test -n "`git status --porcelain $file`"; then
					output="$output\n""  \033[1m$base\033[0m @ $set (linked)"
				else
					output="$output\n""  $base @ $set (linked)"
				fi
			else
				dir=`dirname "$file"`
				set=`basename "$dir"`
				if test -n "`git status --porcelain $file`"; then
					output="$output\n""  \033[1m$base\033[0m @ $set"
				else
					output="$output\n""  $base @ $set"
				fi
			fi
		done
		if test -n "$output"; then
			echo
			echo "Home files linked into the repository (modified in bold):"
			echo "$output"
			echo
		else
			echo
			echo "There are no installed files, use hsh install to install a new set"
			echo
		fi
		if test -n "`git status --porcelain hsh`"; then
			echo "The hsh script is modified"
			echo
		fi

	fi
}

do_download () {
	git pull || die "Impossible to download"
}

do_git () {
	git $@
}

do_track () {
	basename="$1"
	setname="$2"
	homefile="$HOME/$basename"
	if [ -e "$homefile" ]; then
		destination="./home/$setname/$basename"
		cp "$homefile" "$destination"
	fi
}

do_untrack () {
	basename="$1"
	setname="$2"
	homefile="$HOME/$basename"
	destination="./home/$setname/$basename"
	if [ -e "$destination" ]; then
		rm "$destination"
	fi
}

usage () {
	echo
	echo "Home Sweet Home (hsh)"
	echo
	echo "Usage: hsh <command> [<options>]"
	echo
	echo "Where command is one of:"
	echo
	echo "     install: Link the files in the specified sets into home"
	echo "   uninstall: Try to recover the original files in your home"
	echo "      upload: Push the changes in the files to the repository"
	echo "    download: Update your files with the repository version"
	echo "      status: Get info about installed files and possible changes not commited"
	echo "         git: Run a command in git, from inside the hsh folder"
	echo
}

# Dispatch the command entered by the user here
main () {
	cd "$DIR"
	command="$1"
	case "$command" in
		install)
		do_install $2 $3
		;;
		uninstall)
		do_uninstall $2 $3
		;;
		upload)
		do_upload $2
		;;
		download)
		do_download
		;;
		track)
		do_track $2 $3
		;;
		untrack)
		do_untrack $2 $3
		;;
		status)
		do_status $2
		;;
		git)
		shift
		do_git $@
		;;
		*)
		usage
		;;
	esac
}

(main $@)

