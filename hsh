#!/usr/bin/env sh
#
# Home Sweet Home - The easy to use, KISS, dot-file manager
# Copyright 2014 Guillermo Indalecio Fernandez
#

EXEC=`readlink -f "$0"`
DIR=`dirname "$EXEC"`

die () {
	echo "$1"
	exit 1
}

do_install () {
	setname=${1:-base}
	filename="$2"
	echo
	for file in `find "./home/$setname/" -mindepth 1 -maxdepth 1`; do
		base=`basename "$file"`
		file=`readlink -f "$file"`
		local=$HOME/$base
		if [ "$filename" != "" -a "$filename" != "$base" ]; then
			continue
		fi
		if [ -e "$local" -a '!' -h "$local" ]; then
			mv "$local" "$local.bak"
		fi
		echo "Installing [$setname] $base"
		rm -f "$local"
		ln -s "$file" "$local"
	done
	echo
}

do_uninstall () {
	setname=${1:-base}
	filename="$2"
	echo
	for file in `find "./home/$setname/" -mindepth 1 -maxdepth 1`
	do
		base=`basename $file`
		local=$HOME/$base
		if [ "$filename" != "" -a "$filename" != "$base" ]; then
			continue
		fi
		if [ -h "$local" -a "$local" -ef "$file" ]; then
			echo "Uninstalling [$setname] $base"
			rm "$local"
			if [ -e "$local.bak" ]; then
				mv "$local.bak" "$local"
			fi
		fi
	done
	echo
}

do_upload () {
	msg=$1
	test -n "$msg" || die "Give me a commit message"
	git add ./home/
	git commit -a -m "$msg"
	git push
}

do_status () {
	if test -n "$1"; then
		fullfilepath=`readlink -f "$HOME/$1"` || die "File not found in home"
		git diff --src-prefix="hsh@" --dst-prefix="home@" "$fullfilepath" || die "File not found in repository"
	else
		output=""
		for file in `find ./home/*/ -mindepth 1 -maxdepth 1`; do
			base=`basename $file`
			local=$HOME/$base
			dir=`dirname "$file"`
			set=`basename "$dir"`
			if [ -h "$local" -a "$file" -ef `readlink -f "$local"` ]; then
				if test -n "`git status --porcelain $file`"; then
					output="$output\n""`printf "  \033[31;2m%20s   %10s  linked, modified\033[0m" "$base" "$set"`"
				else
					output="$output\n""`printf "  %20s   %10s  linked" "$base" "$set"`"
				fi
			else
				if test -n "`git status --porcelain $file`"; then
					output="$output\n""`printf "  \033[31;2m%20s   %10s  modified\033[0m" "$base" "$set"`"
				else
					output="$output\n""`printf "  %20s   %10s" "$base" "$set"`"
				fi
			fi
		done
		if test -n "$output"; then
			echo
			echo "Home files available from the repository:"
			echo
			printf "  \033[1m%20s   %10s  Status\033[0m" "Dotfile" "Set"
			echo -e "$output"
			echo
		else
			echo
			echo "There are no installed files, use hsh install to install a new set"
			echo
		fi
		if test -n "`git status --porcelain hsh`"; then
			echo "The hsh script is also modified!"
			echo
		fi
	fi
}

do_download () {
	git pull || die "Impossible to download, why oh why?"
}

do_git () {
	git $@
}

do_add () {
	setname="$1"
	basename="$2"
	homefile="$HOME/$basename"
	destination="./home/$setname/$basename"
	if [ -e "$homefile" ]; then
		homefile=`readlink -f "$homefile"`
		echo
		if [ ! -d "./home/$setname/" ]; then
			mkdir -p "./home/$setname/"
			echo "Set [$setname] created"
		fi
		cp "$homefile" "$destination"
		echo "Added [$setname] $basename"
		echo
	fi
}

do_rm () {
	setname="$1"
	basename="$2"
	homefile="$HOME/$basename"
	destination="./home/$setname/$basename"
	if [ -e "$destination" ]; then
		echo
		rm "$destination"
		echo "Removed [$setname] $basename"
		if [ -z "`ls -A "./home/$setname/"`" ]; then
			rmdir "./home/$setname/"
			echo "Set [$setname] removed"
		fi
		echo
	fi
}

usage () {
	tee <<USAGEEOF

Home Sweet Home (hsh) -- The easy to use, KISS, dot-file manager

Usage: hsh <command> [<options>]

Where command is one of:

      status: Get info about installed files and possible changes not commited
     install: Link the files in the specified sets into home
   uninstall: Remove links from home, and try to recover the original files in your home
      upload: Push the changes in the files to the online repository
    download: Update your files with the online repository version
         add: Add a file from home to the repository, create a set if needed
          rm: Remove a file from the respository, removing the set if it gets emptied
         git: Run a command in git, from inside the hsh folder (experts here)

USAGEEOF
}

# Dispatch the command entered by the user here
main () {
	cd "$DIR"
	command="$1"
	shift
	case "$command" in
		upload|download|install|uninstall|status|add|rm|git)
		do_$command $@
		;;
		*)
		usage
		;;
	esac
}

(main $@)

