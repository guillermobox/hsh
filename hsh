#!/usr/bin/env sh
#
# Home Sweet Home - The easy to use, KISS, dot-file manager
# Copyright 2014 Guillermo Indalecio Fernandez
#

die () {
	echo "$1"
	exit 1
}

do_status () {
	if test -n "$1"; then
		local fullfilepath=""
		if test -n "$2"; then
			fullfilepath="./home/$1/$2"
		else
			fullfilepath=`readlink -e "$HOME/$1"` || die "File not found in home"
		fi
		git diff --src-prefix="hsh@" --dst-prefix="home@" "$fullfilepath" || die "File not found in repository"
	else
		local output=""
		for setname in `cd ./home 2>/dev/null && find . ! -name . -prune`;do
			for file in `cd ./home/$setname/ 2>/dev/null && find . ! -name . -prune`; do
				local basename=`basename $file`
				local localname="$HOME/$basename"
				local directory=`dirname "$file"`
				local setname=`basename "$setname"`
				if test -h "$localname" -a "./home/$setname/$file" -ef "`readlink -e "$localname"`"; then
					if test -n "`git status --porcelain ./home/$setname/$file`"; then
						output="$output\n""`printf "  \033[31;2m%10s %-15s  linked, modified\033[0m" "$setname" "$basename"`"
					else
						output="$output\n""`printf "  %10s %-15s  linked" "$setname" "$basename"`"
					fi
				else
					if test -n "`git status --porcelain ./home/$setname/$file`"; then
						output="$output\n""`printf "  \033[31;2m%10s %-15s  modified\033[0m" "$setname" "$basename"`"
					else
						output="$output\n""`printf "  %10s %-15s" "$setname" "$basename"`"
					fi
				fi
			done
		done
		if test -n "$output"; then
			printf "  \033[1m%10s %-15s  Status\033[0m" "Set" "Dotfile"
			printf "%b\n" "$output"
		else
			echo "There are no files defined, please use add to create and populate a set"
		fi
	fi
}

do_install () {
	local setname="$1"
	local filename="$2"

	if test -z "$setname"; then
		echo "Please give me a set name"
		return 1
	fi
	if test ! -d "./home/$setname/"; then
		echo "Set not found: $setname"
		return 1
	fi

	for file in `cd ./home/$setname/ 2>/dev/null && find . ! -name . -prune`; do
		local basename=`basename "$file"`
		local ffilename=`readlink -e "./home/$setname/$file"`
		local localname=$HOME/$basename
		if test "$filename" != "" -a "$filename" != "$basename"; then
			continue
		fi
		if test -e "$localname" -a '!' -h "$localname"; then
			mv "$localname" "$localname.bak"
		fi
		rm -f "$localname"
		ln -s ."${ffilename#$HOME}" "$localname"
		echo "Installed $setname/$basename"
	done
}

do_uninstall () {
	local setname="$1"
	local filename="$2"

	if test -z "$setname"; then
		echo "Please give me a set name"
		return 1
	fi
	if test ! -d "./home/$setname/"; then
		echo "Set not found: $setname"
		return 1
	fi

	for file in `cd ./home/$setname/ 2>/dev/null && find . ! -name . -prune`; do
		local basename=`basename $file`
		local localname="$HOME/$basename"
		if test "$filename" != "" -a "$filename" != "$basename"; then
			continue
		fi
		if test -h "$localname" -a "$localname" -ef "./home/$setname/$file"; then
			rm "$localname"
			if test -e "$localname.bak"; then
				mv "$localname.bak" "$localname"
			fi
			echo "Uninstalled $setname/$basename"
		fi
	done
}

do_upload () {
	local commitmsg="$1"

	test -n "$commitmsg" || die "Give me a commit message"

	git add ./home/
	git commit -a -m "$commitmsg"
	git push
}

do_download () {
	git pull || die "Impossible to download, why oh why?"
	for homefile in $HOME/.*; do
		if test -h "$homefile"; then
			local linkedfile=`readlink -m "$homefile"`
			local linkeddir=`dirname "$linkedfile"`
			if test "${linkeddir##$directory}" = "/home/base" -a ! -e "$linkedfile"; then
				echo "Recovering orphaned file: $homefile"
				rm "$homefile"
				if test -e "$homefile.bak"; then
					mv "$homefile.bak" "$homefile"
				fi
			fi
		fi
	done
}

do_add () {
	local setname="$1"
	local basename="$2"
	local homefile="$HOME/$basename"
	local destination="./home/$setname/$basename"

	if test -z "$basename"; then
		echo "Please give me a filename to add to set $1"
		return
	fi

	if test -e "$homefile"; then
		homefile=`readlink -e "$homefile"`
		if test ! -d "./home/$setname/"; then
			mkdir -p "./home/$setname/"
			echo "Set $setname created"
		fi
		cp -r "$homefile" "$destination"
		echo "Added $setname/$basename"
	fi
}

do_rm () {
	local setname="$1"
	local basename="$2"
	local homefile="$HOME/$basename"
	local destination="./home/$setname/$basename"

	if test -z "$basename"; then
		echo "Please give me a filename to remove from set $1"
		return
	fi

	if test -e "$destination"; then
		do_uninstall "$setname" "$basename"
		rm -r "$destination"
		echo "Removed $setname/$basename"
		if test -z "`ls -A "./home/$setname/"`"; then
			rmdir "./home/$setname/"
			echo "Set $setname removed"
		fi
	fi
}

do_git () {
	git $@
}

usage () {
	tee <<USAGEEOF

Home Sweet Home (hsh) -- The easy to use, KISS, dot-file manager

Usage: hsh <command> [<options>]

Where command can take this shapes:

    hsh status [<dotfile>]
        Get info about the repository. If you state a dotfile name, I'll
        give a git-diff.

    hsh install|uninstall <set> [<dotfile>]
        Link, or de-link a set of dotfiles in your home folder. This operation
        is secure, a backup of the original dotfiles found in your folder will
        be made, so don't worry. If you state a file name, I'll only link
        a certain dotfile of the set.

    hsh add|rm <set> <dotfile>
        Add or remove a dotfile from the repository. I'll create and destroy the
        set automatically as needed.

    hsh upload <commitmsg>
        Upload the changes to the remote repository. Use hsh status to know
        beforehand the changes in the tracked dotfiles.

    hsh download
        Download the dotfiles found in the repository. I won't fix merge
        conflicts, so do it yourself.

    hsh git [<git commands>]
        Run a certain git command in the repository (experts here).

    hsh help
        See this document.

USAGEEOF
}

# Dispatch the command entered by the user here
main () {
	executable=`readlink -e "$0"`
	directory=`dirname "$executable"`
	local command="$1"

	cd "$directory"
	case "$command" in
		upload|download|install|uninstall|status|add|rm|git|test)
		shift
		do_$command "$@"
		;;
		help)
		usage
		;;
		*)
		do_status
		;;
	esac
}

main "$@"

